@typeparam TModel where TModel: new()
@attribute [CascadingTypeParameter(nameof(TModel))]
@implements IDisposable

@if (!forceRefresh)
{
    @if (DataList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (ChildContent == null)
        {
            <p><em>There is nothing to display!</em></p>
        }
        else
        {
            <div class="table-responsive h-100" >
                <table class="table @cssHover table-sm table-head-fixed text-nowrap" style="font-size: 0.85rem">
                    <CascadingValue Value="Recordset?.Fields" Name="FieldInfo">
                        <thead>
                            <tr>
                                <CascadingValue Value="true" Name="IsHeader">
                                    @ChildContent(new TModel())
                                </CascadingValue>
                            </tr>
                        </thead>
                        <tbody>
                            @*<Virtualize Items="DataList" Context="tuple">*@
                            @foreach (var tuple in DataList)
                            {
                                <tr class="@(DataList.IndexOf(tuple) == currentIndex ? "table-primary" : string.Empty)" @onclick="(() => SelectTuple(tuple, DataList.IndexOf(tuple)))">
                                    <CascadingValue Value="@tuple" Name="DataContext">
                                        <CascadingValue Value="false" Name="IsHeader">
                                            @ChildContent(tuple)
                                        </CascadingValue>
                                    </CascadingValue>
                                </tr>
                            }
                            @*</Virtualize>*@
                        </tbody>
                    </CascadingValue>
                </table>        
            </div>
        }

    }
}

@code {
    [Parameter] public List<TModel>? DataList { get; set; }
    [Parameter] public EZRecordset<TModel>? Recordset { get; set; }
    [Parameter, EditorRequired] public RenderFragment<TModel>? ChildContent { get; set; }
    [Parameter] public EventCallback<TModel> SelectionChanged { get; set; }
    [Parameter] public bool Interactief { get; set; } = true;

    protected string cssActive = string.Empty;
    protected int currentIndex = -1;
    protected bool forceRefresh;
    private string cssHover = string.Empty;

    protected override void OnParametersSet()
    {
        if (DataList is null && Recordset is null)
        {
            throw new InvalidOperationException("The parameters DataList or Recordset need to be supplied.");
        }
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        if (Interactief)
        {
            cssHover = "table-hover";
        }
        if (Recordset is null && DataList is not null)
        {
            Recordset = new EZRecordset<TModel>(DataList);
        }
        if (Recordset is not null)
        {
            Recordset.AddOnChangeListeners(OnChange);
        }
        OnChange(this);
        base.OnInitialized();
    }

    protected void SelectTuple(TModel tuple, int index)
    {
        if (Interactief) {
            currentIndex = index;
            SelectionChanged.InvokeAsync(tuple);
        }
    }

    public void Refresh(bool unselect)
    {
        if (unselect) {
            currentIndex = -1;
        }
        forceRefresh = true;
        StateHasChanged();
        forceRefresh = false;
        StateHasChanged();
    }

    public void OnChange(object sender)
    {
        if (Recordset is not null)
        {
            DataList = Recordset.Data;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (Recordset is not null)
        {
            Recordset.RemoveOnChangeListeners(OnChange);
        }
    }


}
