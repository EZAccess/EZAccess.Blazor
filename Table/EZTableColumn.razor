@using System.Reflection
@typeparam TModel

@if (IsHeader)
{
    <th class="@cssClass">@Header</th>
}
else
{
    <td class="@cssClass">
        @if (ChildContent is null) {
            if (Hyperlink is null)
            {
                @Value
            }
            else
            {
                <a href="@(String.Format(Hyperlink, @Value))">@Value</a>
            }
        }
        else {
            @ChildContent
        }
    </td>
}

@code {
    [CascadingParameter(Name = "DataContext")] public object? DataContext { get; set; }
    [CascadingParameter(Name = "IsHeader")] public bool IsHeader { get; set; }

    [Parameter, EditorRequired] public string Field { get; set; } = string.Empty;
    [Parameter] public string? Header { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Hyperlink { get; set; }

    protected string Value { get; set; } = string.Empty;
    protected string? header;
    private string? cssClass;

    protected override void OnInitialized()
    {
        Value = string.Empty;
        EZField field = new(typeof(TModel), Field);
        if (field.PropertyType.IsNumeric() || field.PropertyType.IsDate())
        {
            cssClass = "text-right";
        }
        if (IsHeader) {
            Header = Header ?? field.Display;
        }
        else
        {
            if (DataContext != null)
            {
                var value = field.Value(DataContext);
                string? valueString;
                if (field.DisplayFormat is not null && value is IFormattable)
                {
                    var x = (IFormattable)value;
                    valueString = x.ToString(field.DisplayFormat, null);
                }
                else
                {
                    valueString = value?.ToString();
                }
                Value = valueString ?? string.Empty;
            }
        }

        base.OnInitialized();
    }
}
