@using System.Reflection
@using System.Linq.Expressions
@typeparam TValue

@if (targetType != null) 
{
    <InputGroup Id="@Id" Label="@Label" >
        @switch (elementType)
        {
            case "number":
                <EZInputNumber @ref="inputNumber" @bind-Value="BoundValue" ValueExpressionOverwrite="ValueExpression" Id="@Id" Editable="@(Editable ?? true)" @onfocus="OnFocus" />
                break;
            case "date":
                <EZInputDate @ref="inputDate" @bind-Value="BoundValue" ValueExpressionOverwrite="ValueExpression" Id="@Id" Editable="@(Editable ?? true)" @onfocus="OnFocus" />
                break;
            case "checkbox":
                <EZInputCheckbox @ref="inputCheckbox" @bind-Value="BoundValue" ValueExpressionOverwrite="ValueExpression" Id="@Id" Editable="@(Editable ?? true)" @onfocus="OnFocus" />
                break;
            default:
                <EZInputText @ref="inputText" @bind-Value="BoundValue"  ValueExpressionOverwrite="ValueExpression" Id="@Id" Editable="@(Editable ?? true)" @onfocus="OnFocus" />
                break;
        }
    </InputGroup>
}
else {
    <p>Error in @(this.GetType().Name)</p>
}

@code {
    [CascadingParameter] private EditContext? CascadedEditContext { get; set; }
    [CascadingParameter(Name = "ActionOnFocus")] private Action<bool>? ActionOnFocus { get; set; }
    [CascadingParameter(Name = "inputHasFocus")] private EZInPutHasFocus? inputHasFocus { get; set; }

    // The following 3 parameters and 1 property are required to make the databinding possible
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue?>>? ValueExpression{ get; set; }
    private TValue? BoundValue {
        get => Value;
        set => ValueChanged.InvokeAsync(value);
    }

    // Parameters to overrule default values
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool? Editable { get; set; }
    [Parameter] public string? Field { get; set; }
    [Parameter] public bool FirstFocus { get; set; }
    // helper fields
    private Type? targetType;
    private string Id = string.Empty;
    private EZInputNumber<TValue?>? inputNumber;
    private EZInputDate<TValue?>? inputDate;
    private EZInputCheckbox<TValue?>? inputCheckbox;
    private EZInputText<TValue?>? inputText;
    private string? elementType;

    protected override void OnInitialized()
    {
        if (CascadedEditContext == null) {
            throw new InvalidOperationException($"{GetType()} requires a value for the 'CascadedEditContext' " +
                "parameter. Normally this is provided automatically by the blazor EditForm as Cascading Parameter.");
        }
        if (Field == null && ValueExpression == null) {
            throw new InvalidOperationException($"{GetType()} requires either an @bind-Value pameter or a value " + 
                "for the 'Field' parameter ");
        }
        string fieldName = string.Empty;
        if (ValueExpression == null)
        {
            fieldName = Field ?? string.Empty;            
        }
        else
        {
            fieldName = FieldIdentifier.Create(ValueExpression).FieldName;        
        }
        EZField field = new(CascadedEditContext.Model.GetType(), fieldName);
        Label =  Label ?? field.Display;
        Editable = ValueChanged.HasDelegate ? Editable ?? field.Editable : false;
        targetType = typeof(TValue);
        Id = field.FieldName;
        elementType = targetType.IsNumeric() ? "number" : elementType;
        elementType = targetType.IsDate() ? "date" : elementType;
        elementType = targetType.IsBoolean() ? "checkbox" : elementType;
        elementType ??= "text";
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (FirstFocus && inputHasFocus is not null)
        {
            if (inputHasFocus.Input.Id is null)
            {
                switch (elementType)
                {
                    case "number":
                        inputHasFocus.Input = inputNumber?.Element ?? new();
                        break;
                    case "date":
                        inputHasFocus.Input = inputDate?.Element ?? new();
                        break;
                    case "checkbox":
                        inputHasFocus.Input = inputCheckbox?.Element ?? new();
                        break;
                    default:
                        inputHasFocus.Input = inputText?.Element ?? new();
                        break;
                }
            }
        }
        base.OnAfterRender(firstRender);
    }

    private void OnFocus()
    {
        ActionOnFocus?.Invoke(false);
    }
}
