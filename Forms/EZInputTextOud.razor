@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using System.Linq.Expressions
@typeparam TValue
@inherits InputBase<TValue?>

@*<div class="form-group row">
    <label class="col-sm-3 col-form-label" style="font-weight:normal" for="@Id" >@Label</label>
    <div class="col-sm-8" >
        <input autocomplete="off" type="text" @bind="CurrentValue" @bind:event="oninput" id="@Id" class="@CssClass" readonly="@(!Editable)" />
    </div>
</div>
*@

<input autocomplete="off" type="text" @bind="CurrentValue" @bind:event="onchange" id="@Id" class="@CssClass" readonly="@(!Editable)" />

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public bool Editable { get; set; }
    [Parameter] public Expression<Func<TValue?>>? ValueExpressionOverwrite { get; set; }
    protected string ParsingErrorMessage { get; set; } = "The {0} field must be text.";

    protected override void OnInitialized()
    {
        Id = Id ?? FieldIdentifier.FieldName;
    }

    /// <summary>
    /// Overwrite the parameters to get the correct ValueExpression, which list used to determine the FieldIdentifier
    /// </summary>
    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (ValueExpressionOverwrite != null)
        {
            ValueExpression = ValueExpressionOverwrite;
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    //protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    //{
    //    result = value;
    //    validationErrorMessage = null;
    //    return true;
    //}
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo(value, CultureInfo.InvariantCulture, out result)) {
            validationErrorMessage = null;
            return true;
        }
        else {
            validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
            return false;
        }    
    }
}
