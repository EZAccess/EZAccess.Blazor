@implements IDisposable
@typeparam TModel where TModel : new()
@attribute [CascadingTypeParameter(nameof(TModel))]


@if(Recordset == null)
{
    <p>Error initializing...</p>
}
else
{
    <CascadingValue Value="Recordset" Name="Recordset">
        <div class="row">
            @*This is the header section of the component. If no parameter is given use the default.*@ 
            @if (@HeaderSection != null)
            {
                @HeaderSection
            }
        </div>
        @*This is the data section. Display the content of the recordsset*@
        @if (Recordset.Data == null || Recordset.IsBusy)
        {
            <Spinner>Loading...</Spinner>
        }
        else
        {
            @if (ShowMultipleRecords)
            {
                @foreach (var _record in Recordset.Records)
                {
                    @if (_record != null)
                    {
                        <EZEditFormSub TModel="TModel" Record="_record" >
                            <InputArea >
                                @if (InputSection != null)
                                {
                                    @InputSection(context)
                                }
                            </InputArea>
                        </EZEditFormSub>
                    }

                }

            }
            else
            {
                @if (Recordset.SelectedRecord != null)
                {
                    <EZEditFormSub TModel="TModel" Record="Recordset.SelectedRecord" >
                        <InputArea >
                            @if (InputSection != null)
                            {
                                @InputSection(context)
                            }
                        </InputArea>
                    </EZEditFormSub>
                }

            }
        }
        <div class="row">
            @*This is the footer section of the component. If no parameter is given use the default.*@
            @if (FooterSection != null)
            {
                @FooterSection
            }
        </div>
    </CascadingValue>        
}


@code {
    [Parameter, EditorRequired] public EZRecordset<TModel>? Recordset { get; set; }
    [Parameter] public RenderFragment? HeaderSection { get; set; }
    [Parameter] public RenderFragment<TModel>? InputSection { get; set; }
    [Parameter] public RenderFragment? FooterSection { get; set; }
    [Parameter] public bool? AllowAdditions { get; set; } 
    [Parameter] public bool? AllowEditions { get; set; }
    [Parameter] public bool ManualAdditions { get; set; }
    [Parameter] public bool ShowMultipleRecords { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Recordset == null)
        {
            throw new InvalidOperationException($"The parameter {nameof(Recordset)} is required!");
        }
        AllowEditions = Recordset.IsReadOnly ? false : AllowEditions ??= !Recordset.IsReadOnly;
        AllowAdditions = Recordset.IsReadOnly ? false : AllowAdditions ??= !Recordset.IsReadOnly;
        return base.SetParametersAsync(ParameterView.Empty);
    }


    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshForm);
        base.OnParametersSet();
    }

    public void RefreshForm()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshForm);
    }
}
