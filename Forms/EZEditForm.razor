@implements IDisposable
@attribute [CascadingTypeParameter(nameof(TModel))]
@typeparam TModel where TModel : new()


@if(Recordset == null)
{
    <p>Error initializing...</p>
}
else
{
    <CascadingValue Value="Recordset" Name="Recordset">
        @*This is the data section. Display the content of the recordsset*@
        @if (Recordset.Data == null || Recordset.IsBusy)
        {
            <Spinner>Loading...</Spinner>
        }
        else
        {
            @if (ShowMultipleRecords)
            {
                @foreach (var _record in Recordset.Records)
                {
                    @if (_record != null)
                    {
                        <EZEditFormSub TModel="TModel" Record="_record" >
                            @if (ChildContent != null)
                            {
                                @ChildContent(context)
                            }
                        </EZEditFormSub>
                    }

                }

            }
            else
            {
                @if (Recordset.CurrentRecord != null)
                {
                    <EZEditFormSub TModel="TModel" Record="Recordset.CurrentRecord" >
                        @if (ChildContent != null)
                        {
                            @ChildContent(context)
                        }
                    </EZEditFormSub>
                }

            }
        }
    </CascadingValue>        
}


@code {
    [Parameter, EditorRequired] public EZRecordset<TModel>? Recordset { get; set; }
    [Parameter] public RenderFragment<TModel>? ChildContent { get; set; }
    [Parameter] public bool? AllowAdditions { get; set; } 
    [Parameter] public bool? AllowEditions { get; set; }
    [Parameter] public bool ManualAdditions { get; set; }
    [Parameter] public bool ShowMultipleRecords { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Recordset == null)
        {
            throw new InvalidOperationException($"The parameter {nameof(Recordset)} is required!");
        }
        AllowEditions = Recordset.AllowUpdate ? true : AllowEditions ??= Recordset.AllowUpdate;
        AllowAdditions = Recordset.AllowCreate ? true : AllowAdditions ??= Recordset.AllowCreate;
        return base.SetParametersAsync(ParameterView.Empty);
    }


    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshForm);
        base.OnParametersSet();
    }

    public void RefreshForm(object sender)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshForm);
    }
}
