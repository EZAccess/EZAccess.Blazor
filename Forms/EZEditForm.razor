@implements IDisposable
@typeparam TModel where TModel : new()

<div class="container-fluid">
    @if(Recordset == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (ShowMultipleRecords)
        {
            @foreach (var _record in Recordset.Records)
            {
                @if (_record != null)
                {
                    <EZEditFormSub TModel="TModel" Record="_record" >
                        <InputArea >
                            @if (InputArea != null)
                            {
                                @InputArea(context)
                            }
                        </InputArea>
                    </EZEditFormSub>
                }

            }
        }
        else
        {
            @if (Recordset.SelectedRecord != null)
            {
                <EZEditFormSub TModel="TModel" Record="Recordset.SelectedRecord" >
                    <InputArea >
                        @if (InputArea != null)
                        {
                            @InputArea(context)
                        }
                    </InputArea>
                </EZEditFormSub>
            }
        }
    }
</div>

@code {
    [Parameter, EditorRequired] public EZRecordset<TModel>? Recordset { get; set; }
    [Parameter] public RenderFragment<TModel>? InputArea { get; set; }
    [Parameter] public bool? AllowAdditions { get; set; } 
    [Parameter] public bool? AllowEditions { get; set; }
    [Parameter] public bool ManualAdditions { get; set; }
    [Parameter] public bool ShowMultipleRecords { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Recordset == null)
        {
            throw new InvalidOperationException($"The parameter {nameof(Recordset)} is required!");
        }
        AllowEditions = Recordset.IsReadOnly ? false : AllowEditions ??= !Recordset.IsReadOnly;
        AllowAdditions = Recordset.IsReadOnly ? false : AllowAdditions ??= !Recordset.IsReadOnly;
        return base.SetParametersAsync(ParameterView.Empty);
    }


    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshForm);
        base.OnParametersSet();
    }

    public void RefreshForm()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshForm);
    }
}
