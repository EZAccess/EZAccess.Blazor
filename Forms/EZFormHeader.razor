@implements IDisposable
@typeparam TModel where TModel : new()

<div class="row">
    <div class="column mb-3">
        @if (Recordset == null)
        {
            <p>The parameter '@nameof(Recordset)' is missing!</p>
        }
        else{
            <div class="d-inline-flex">
                <div class="btn-group mr-3">
                    <button class="btn btn-default" @onclick="RefreshData">
                        <i class="fas fa-undo text-info mr-1"></i>
                        <span>Refresh</span>
                    </button>
                    @if (_showUploadButton)
                    {
                        @if (Recordset.ChangedRecordsCount == 0)
                        {
                            <button class="btn btn-default" >
                                <i class="fas fa-cloud-upload-alt text-muted mr-1" />
                                <span>Upload changes</span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-default" title="@(Recordset.InvalidRecordsCount > 0 ? (Recordset.InvalidRecordsCount == 1 ? "1 record is not valid" : $"{Recordset.InvalidRecordsCount} records are not valid!") : string.Empty)" @onclick="SaveAllChanges">
                                @if (Recordset.ChangedRecordsCount > 0)
                                {
                                    <span class="@($"position-absolute badge badge-{(Recordset.InvalidRecordsCount > 0 ? "danger" : "warning")} badge-pill")" style="left: 1.3rem">@Recordset.ChangedRecordsCount</span>
                                }
                                <i class="fas fa-cloud-upload-alt text-success mr-1" />
                                <span>Upload changes</span>
                            </button>
                        }
                    }
                    @if (_showInsertButton)
                    {
                        <button class="btn btn-default" @onclick="InsertRecord">
                            <i class="fas fa-plus text-info mr-1" />
                            <span>Insert record</span>
                        </button>
                    }
                    @if (_showOptions)
                    {
                        <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                            <i class="fa fa-cog"></i>
                        </button>
                        <div class="dropdown-menu">
                            <div class="dropdown-item-text">
                                <div class="form-group mb-0">
                                    <div class="custom-control custom-switch">
                                        <input class="custom-control-input" type="checkbox" id="@($"AutoSaveCheckbox{this.GetHashCode}")" @bind-value="@(Recordset.SaveChangesAutomatic)">
                                        <label class="custom-control-label form-check-label" for="@($"AutoSaveCheckbox{this.GetHashCode}")" >Autosave</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        
            <!--
            <div class="d-inline-flex">
                <div class="input-group mr-3">
                    <input type="search" class="form-control" style="width: 7rem;" placeholder="Goto record">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-default">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            -->

            <div class="d-inline-flex">
                <div class="input-group mr-3 w-100">
                    <input type="text" readonly class="form-control-plaintext" value="@Recordset.ErrorMessage">
                </div>
            </div>

        }
    </div>
</div>

@code {
    [Parameter, EditorRequired] public EZRecordset<TModel>? Recordset { get; set; }
    [Parameter] public bool? ShowUploadButton { get; set; }
    [Parameter] public bool? ShowInsertButton { get; set; }
    [Parameter] public bool? ShowOptions { get; set; }

    private bool _showUploadButton;
    private bool _showInsertButton;
    private bool _showOptions;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Recordset == null)
        {
            throw new InvalidOperationException($"{GetType()} requires an {nameof(Recordset)} parameter!");
        }
        _showUploadButton = !Recordset.AllowUpdate ? false: ShowUploadButton ?? true;
        _showInsertButton = !Recordset.AllowCreate ? false: ShowInsertButton ?? true;
        _showOptions = !Recordset.AllowUpdate ? false: ShowOptions ?? true;
        return base.SetParametersAsync(ParameterView.Empty);
    }

    private void SaveAllChanges()
    {
        Recordset?.SaveAllChanges();
    }

    private void InsertRecord()
    {
        Recordset?.FocusOrAddNewRecord();
    }

    private void RefreshData()
    {
        Recordset?.StartRefreshData();
    }

    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshHeader);
        base.OnParametersSet();
    }

    public void RefreshHeader(object sender)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshHeader);
    }
}
