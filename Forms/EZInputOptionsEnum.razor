@using System.Reflection
@using System.ComponentModel.DataAnnotations

@if (_options is not null)
{
    @foreach (var option in _options)
    {
        <option value="@option.Key">@option.Value</option>
    }
}

@code {
    [Parameter, EditorRequired] public Type? EnumType { get; set; }
    private Dictionary<string, string>? _options;

    protected override void OnParametersSet()
    {
        OptionsContent();
        base.OnParametersSet();
    }

    private void OptionsContent()
    {
        if (EnumType is null)
        {
            throw new InvalidOperationException("The parameter EnumType is required!");
        }
        // Add an option element per enum value
        var enumType = Nullable.GetUnderlyingType(EnumType) ?? EnumType;
        _options = new();

        foreach (var value in Enum.GetValues(enumType)) {
            string? enumValue = value.ToString();
            if (enumValue != null) {
                // Read the Display attribute name
                string displayName; 
                var member = value.GetType().GetMember(enumValue)[0];
                var displayAttribute = member.GetCustomAttribute<DisplayAttribute>();
                if (displayAttribute != null) {
                    displayName = displayAttribute.Name ?? enumValue;
                }
                else {
                    displayName = enumValue;
                }
                _options.Add(enumValue, displayName);
            }

        }
    }


}
