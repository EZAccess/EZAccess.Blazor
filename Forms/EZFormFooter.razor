@implements IDisposable
@typeparam TModel where TModel : new()
@attribute [CascadingTypeParameter(nameof(TModel))]

<div class="column mb-3">
    @if (Recordset == null)
    {
        <p>The parameter '@nameof(Recordset)' is missing!</p>
    }
    else
    {
        <div class="d-inline-flex">
            <div class="input-group">
                <input type="search" class="form-control" style="width: 7rem;" placeholder="Goto record">
                <div class="input-group-append">
                    <button type="button" class="btn btn-default">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [CascadingParameter(Name = "Recordset")] public EZRecordset<TModel>? Recordset { get; set; }
//    [Parameter] public bool? ShowUploadButton { get; set; }
//    [Parameter] public bool? ShowInsertButton { get; set; }

//    private bool _showUploadButton;
//    private bool _showInsertButton;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
//        _showUploadButton = true;
//        _showInsertButton = true;
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshFooter);
        base.OnParametersSet();
    }

    public void RefreshFooter()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshFooter);
    }
}
