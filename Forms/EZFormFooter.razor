@implements IDisposable
@attribute [CascadingTypeParameter(nameof(TModel))]
@typeparam TModel where TModel : new()

<div class="row">
    <div class="column mb-3">
        @if (Recordset == null)
        {
            <p>The parameter '@nameof(Recordset)' is missing!</p>
        }
        else
        {
            <div class="d-inline-flex mr-3">
                <div class="input-group input-group-sm">
                    <div class="input-group-prepend">
                        <button type="button" class="btn btn-default">
                            <i class="fas fa-caret-left"></i>
                        </button>
                    </div>
                    <input type="search" class="form-control" style="width: 7rem;" placeholder="Goto record">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-default">
                            <i class="fas fa-search"></i>
                        </button>
                        <button type="button" class="btn btn-default">
                            <i class="fas fa-caret-right"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="d-inline-flex mr-3">This is a mockup only</div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired] public EZRecordset<TModel>? Recordset { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Recordset == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a {nameof(Recordset)} parameter!");
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshFooter);
        base.OnParametersSet();
    }

    public void RefreshFooter(object sender)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshFooter);
    }
}
