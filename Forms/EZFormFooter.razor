@implements IDisposable
@attribute [CascadingTypeParameter(nameof(TModel))]
@typeparam TModel where TModel : new()

<div class="@($"row {CssClass}")">
    <div class="column">
        @if (Recordset == null)
        {
            <p>The parameter '@nameof(Recordset)' is missing!</p>
        }
        else
        {
            <div class="d-inline-flex mr-3">
                <div class="input-group input-group-sm">
                    <div class="input-group-prepend">
                        <button type="button" class="btn btn-default" @onclick="SelectFirst">
                            <i class="fas fa-backward"></i>
                        </button>
                        <button type="button" class="btn btn-default" @onclick="SelectPrevious">
                            <i class="fas fa-caret-left"></i>
                        </button>
                    </div>
                    <input @bind-value="@index" @onkeyup="OnKeyPress" type="search" class="form-control" style="width: 7rem;" placeholder="Goto record" >
                    <div class="input-group-append">
                        <button type="button" class="btn btn-default" @onclick="GoToRecord" >
                            <i class="fas fa-search"></i>
                        </button>
                        <button type="button" class="btn btn-default" @onclick="SelectNext">
                            <i class="fas fa-caret-right"></i>
                        </button>
                        <button type="button" class="btn btn-default" @onclick="SelectLast">
                            <i class="fas fa-forward"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired] public EZRecordset<TModel>? Recordset { get; set; }
    [Parameter] public string CssClass { get; set; } = string.Empty;
    private int index;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Recordset == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a {nameof(Recordset)} parameter!");
        }
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        Recordset?.AddOnChangeListeners(RefreshFooter);
        base.OnParametersSet();
    }

    public void RefreshFooter(object sender)
    {
        index = Recordset?.CurrentIndex ?? 0;
        InvokeAsync(StateHasChanged);
    }

    public void SelectFirst()
    {
        Recordset?.SelectFirst();
    }

    public void SelectPrevious()
    {
        Recordset?.SelectPrevious();
    }

    public void SelectNext()
    {
        Recordset?.SelectNext();
    }

    public void SelectLast()
    {
        Recordset?.SelectLast();
    }

    public void GoToRecord()
    {
        Recordset?.GoToRecord(index);
    }

    public void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
        {
            GoToRecord();
        }
    }

    public void Dispose()
    {
        Recordset?.RemoveOnChangeListeners(RefreshFooter);
    }
}
