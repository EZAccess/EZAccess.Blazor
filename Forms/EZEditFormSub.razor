@using EZAccess.Data
@implements IDisposable
@typeparam TModel where TModel : new()

@if (Record == null)
{
    <p>Error...</p>
}
else {
    <div class="row">
        <EditForm id="@($"EditFormId{Record.GetHashCode()}")" class="w-100" EditContext="editContext" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <EZValidation @ref="ezValidation" />
            <CascadingValue Value="Record" Name="CascadedRecord">
                @if (ChildContent != null && editContext != null) {
                    @ChildContent((TModel)editContext.Model)
                }
            </CascadingValue>
        </EditForm>
    </div>
}

@code {
    [Parameter, EditorRequired] public EZRecord<TModel>? Record { get; set; }
    [Parameter] public RenderFragment<TModel>? ChildContent { get; set; }
    private EditContext? editContext;
    //private List<string> validationMessages = new();
    private EZValidation? ezValidation;
    private EventHandler<TModel>? onAfterUpdate;
    private EventHandler<string>? onCRUDError;
    private EventHandler<EZStateHasChangedEventArgs>? stateHasChanged;
    //private TModel model = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (Record == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a valid parameter {nameof(Record)}");
        }
        await base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnParametersSet()
    {
        ResetEditContext();
        base.OnParametersSet(); 
    }

    private void ResetEditContext()
    {
        if (Record != null)
        {
            bool editContextJustSet = false;
            if (Record.Model == null)
            {
                throw new InvalidOperationException($"The parameter {nameof(Record)} must have a " +
                    $"property {nameof(Record.Model)} which is not null.");
            }
            if (editContext == null)
            {
                editContext = new(Record.Model);
                editContext.SetFieldCssClassProvider(new FieldCssProvider());
                editContextJustSet = true;
            }
            else
            {
                if (editContext.Model.GetHashCode() != Record.Model.GetHashCode())
                {
                    Dispose();
                    editContext = new(Record.Model);
                    editContext.SetFieldCssClassProvider(new FieldCssProvider());
                    editContextJustSet = true;
                }
            }
            if (editContext != null && editContextJustSet)
            {
                // wire up all the event listeners
                editContext.OnFieldChanged += OnFieldChanged;
                editContext.OnValidationStateChanged += OnValidationStateChanged;
                onAfterUpdate = (s, d) => InvokeAsync(editContext.MarkAsUnmodified);
                onCRUDError = (s, d) => InvokeAsync(() => {
                    if (Record.ValidationErrors != null)
                    {
                        ezValidation?.DisplayErrors(Record.ValidationErrors);
                        StateHasChanged();
                    };
                });
                stateHasChanged = (s, a) => {
                    if (editContext.Model.GetHashCode() != Record.Model.GetHashCode())
                    {
                        ResetEditContext();
                    }
                    InvokeAsync(StateHasChanged);
                };

                Record.OnAfterUpdate += onAfterUpdate;
                Record.OnCRUDError += onCRUDError;
                Record.StateHasChanged += stateHasChanged;
            }
        }
    }

    public void OnFieldChanged(object? sender, FieldChangedEventArgs eventArgs)
    {
        Record?.OnFieldChanged(eventArgs.FieldIdentifier.FieldName);
    }

    public void OnValidationStateChanged(object? sender, ValidationStateChangedEventArgs args)
    {
        Record?.OnValidationStateChanged(editContext?.GetValidationMessages());
    }


    public void Dispose()
    {
        if (editContext != null && Record != null)
        {
            editContext.OnFieldChanged -= OnFieldChanged;
            editContext.OnValidationStateChanged -= OnValidationStateChanged;
        }
        if (Record != null)
        {
            // Intention is to save changes automaticaly, but this has some unexpected 
            // side effects. There are certain senario's where this is not allowed. Until 
            // this is better thought through the feature is on hold.
            ///if (Record.IsChanged) {
            //    Record.SaveChanges();
            //}
            Record.OnAfterUpdate -= onAfterUpdate;
            Record.OnCRUDError -= onCRUDError;
            Record.StateHasChanged -= stateHasChanged;

        }
    }

    public void HandleValidSubmit()
    {
        Record?.SaveChanges();
    }

}
